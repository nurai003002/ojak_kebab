from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import token 
from logging import basicConfig, INFO
import sqlite3
from datetime import datetime

bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
basicConfig(level=INFO)

class OrderFoodState(StatesGroup):
    name = State()
    title = State()
    phone_number = State()
    address = State()

connect = sqlite3.connect('ojak_kebap.db')
cursor = connect.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username VARCHAR(100),
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        date_joined DATETIME
);''')

connect.commit()
cursor.execute(''' CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(100),
        title TEXT,
        phone_number VARCHAR(100),
        address VARCHAR(100)
);''')
connect.commit()

class OrderFoodState(StatesGroup):
    name = State()
    title = State()
    phone_number = State()
    address = State()


start_buttons = [
    types.KeyboardButton('–û –Ω–∞—Å'),
    types.KeyboardButton('–ú–µ–Ω—é'),
    types.KeyboardButton('–ê–¥—Ä–µ—Å'),
    types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É'),
    types.KeyboardButton('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º')
]
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_buttons)

@dp.message_handler(text = "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º")
async def insta(message: types.Message):
    await message.answer("–ù–∞—àa –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ |\n                                                          V\nhttps://www.instagram.com/ocak_kebap_official/")


@dp.message_handler(commands='start')
async def start(message:types.Message):
    cursor=connect.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = {message.from_user.id};")
    res = cursor.fetchall()
    if not res:
        cursor.execute(f"""INSERT INTO users (id, username, first_name, last_name, date_joined) VALUES (
            {message.from_user.id},
            '{message.from_user.first_name}',
            '{message.from_user.last_name}',
            '{message.from_user.username}',
            '{datetime.now()}'
);""")
        
        cursor.connection.commit()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 'OJAK KEBAP'! \n –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–µ–∏–µ..üôåüèª", reply_markup=start_keyboard)
@dp.message_handler(text='–ú–µ–Ω—é')
async def manu(message:types.Message):
    await message.answer("–ú–ï–ù–Æ üìî \n–†–∞–∑–¥–µ–ª '–®–∞—à–ª—ã–∫–∏'üñáüôåüèª\nhttps://ocak.uds.app/c/goods?categoryId=498873", reply_markup=start_keyboard)


@dp.message_handler(text='–û –Ω–∞—Å')
async def about(message:types.Message):
    await message.answer('–ö–∞—Ñ–µ "–û–∂–∞–∫ –ö–µ–±–∞–ø" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 18 –ª–µ—Ç —Ä–∞–¥—É–µ—Ç —Å–≤–æ–∏—Ö –≥–æ—Å—Ç–µ–π —Å\n –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–µ—Ü–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏ –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–≤–æ–∏–º –∫–µ–±–∞–±–æ–º.\n–ù–∞—à–µ –∫–∞—Ñ–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–Ω–æ–≥–∏—Ö –∫–∞—Ñ–µ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.\n \n–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ -> https://ocak.uds.app/c/about')


@dp.message_handler(text = '–ê–¥—Ä–µ—Å')
async def address(message: types.Message):
    await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å:")
    await message.answer("üìå –ê–¥—Ä–µ—Å: \n –≥. –ë–∏—à–∫–µ–∫, –ß—É–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 76–ë \n  –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: \n\n +996312979845 \n +996990006122")
    await message.answer_location(42.817709, 74.557861)


@dp.message_handler(text='–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É')
async def about(message:types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
    await OrderFoodState.name.set()


@dp.message_handler(state=OrderFoodState.name)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?\n(–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞)")
    await OrderFoodState.next()


@dp.message_handler(state=OrderFoodState.title)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    await OrderFoodState.next()


@dp.message_handler(state=OrderFoodState.phone_number)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:")
    await OrderFoodState.next()


@dp.message_handler(state=OrderFoodState.address)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text

    async with state.proxy() as data:
        name = data['name']
        title = data['title']
        phone_number = data['phone_number']
        address = data['address']

    cursor.execute('''
        INSERT INTO orders (name, title, phone_number, address )
        VALUES (?, ?, ?, ?)
    ''', (name, title, phone_number, address))
    connect.commit()

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç—å.\n–ö—É—Ä—å–µ—Ä  –≤ –ø—É—Ç–∏...  üõµ")
    await state.finish()


executor.start_polling(dp, skip_updates=True)